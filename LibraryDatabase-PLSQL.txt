--DROPPING ALL TABELES
DROP TABLE Account;
DROP TABLE Details_Of_Autheren_Book;
DROP TABLE "Order";
DROP TABLE Reader;
DROP TABLE Author;
DROP TABLE Book;

--CREATING TABELES
--Table: Account
CREATE TABLE Account (
    Id_Account int  NOT NULL,
    Reader_Id_Reader int  NOT NULL,
    CONSTRAINT Account_pk PRIMARY KEY  (Id_Account)
);

-- Table: Author
CREATE TABLE Author (
    Id_Author int  NOT NULL,
    Name varchar(100)  NOT NULL,
    Surname varchar(100)  NOT NULL,
    CONSTRAINT Author_pk PRIMARY KEY  (Id_Author)
);
-- Table: Book
CREATE TABLE Book (
    Id_Book int  NOT NULL,
    Name varchar(200)  NOT NULL,
    Type_of_book varchar(100),
    Published_year int  NOT NULL,
    CONSTRAINT Book_pk PRIMARY KEY  (Id_Book)
);

-- Table: Details_Of_Autheren_Book
CREATE TABLE Details_Of_Autheren_Book (
    Id_Details int  NOT NULL,
    Author_Id_Author int  NOT NULL,
    Book_Id_Book int  NOT NULL,
    CONSTRAINT Details_Of_Autheren_Book_pk PRIMARY KEY  (Id_Details)
);

-- Table: Order
CREATE TABLE "Order" (
    Id_Order int  NOT NULL,
    Date_take date  NOT NULL,
    Date_give date  NOT NULL,
    Book_Id_Book int  NOT NULL,
    Reader_Id_Reader int  NOT NULL,
    CONSTRAINT Order_pk PRIMARY KEY  (Id_Order)
);

-- Table: Reader
CREATE TABLE Reader (
    Id_Reader int  NOT NULL,
    Name varchar(100)  NOT NULL,
    Surname varchar(100)  NOT NULL,
    Contac_tInfo int,
    date_of_birth date  NOT NULL,
    CONSTRAINT Reader_pk PRIMARY KEY  (Id_Reader)
);

-- Foreign Keys

ALTER TABLE Account ADD CONSTRAINT Account_Reader
    FOREIGN KEY (Reader_Id_Reader)
    REFERENCES Reader (Id_Reader);


ALTER TABLE Details_Of_Autheren_Book ADD CONSTRAINT Details_Of_Autheren_Book_Author
    FOREIGN KEY (Author_Id_Author)
    REFERENCES Author (Id_Author);


ALTER TABLE Details_Of_Autheren_Book ADD CONSTRAINT Details_Of_Autheren_Book_Book
    FOREIGN KEY (Book_Id_Book)
    REFERENCES Book (Id_Book);


ALTER TABLE "Order" ADD CONSTRAINT Order_Book
    FOREIGN KEY (Book_Id_Book)
    REFERENCES Book (Id_Book);


ALTER TABLE "Order" ADD CONSTRAINT Order_Reader
    FOREIGN KEY (Reader_Id_Reader)
    REFERENCES Reader (Id_Reader);
    
--Inserting data into the tables have already created.
INSERT INTO Reader VALUES(1,'SMITH','MARK',3456728,TO_DATE('20-MAY-1996','DD-MON-YYYY'));
INSERT INTO Reader VALUES(2,'MARRY','PERL',1234567,TO_DATE('03-JUL-1999','DD-MON-YYYY'));
INSERT INTO Reader VALUES(3,'SANDRA','LOREN',908765,TO_DATE('20-MAY-2004','DD-MON-YYYY'));
INSERT INTO Reader VALUES(4,'HANS','SPENCER',4536782,TO_DATE('09-OCT-1995','DD-MON-YYYY'));
INSERT INTO Reader VALUES(5,'JACK','TRUE',8054632,TO_DATE('30-JUL-1999','DD-MON-YYYY'));
INSERT INTO Reader VALUES(6,'LAURA','SMITH',7465392,TO_DATE('20-MAY-1996','DD-MON-YYYY'));
INSERT INTO Reader VALUES(7,'ANDRIE','SAM',098425,TO_DATE('09-DEC-1995','DD-MON-YYYY'));
INSERT INTO Reader VALUES(8,'ALEX','ALLER',3487653,TO_DATE('20-JAN-1986','DD-MON-YYYY'));
INSERT INTO Reader VALUES(9,'MAX','TOMAS',6543782,TO_DATE('27-SEP-1998','DD-MON-YYYY'));
INSERT INTO Reader VALUES(10,'DANIEL','PERL',NULL,TO_DATE('22-MAR-1995','DD-MON-YYYY'));

INSERT INTO Author VALUES(1,'Louis','Sachar');
INSERT INTO Author VALUES(2,'Peter','Sagal');
INSERT INTO Author VALUES(3,'Carl','Sagan');
INSERT INTO Author VALUES(4,'Sait','Faik');
INSERT INTO Author VALUES(5,'Henry','Abbey');
INSERT INTO Author VALUES(6,'John','Barnes');
INSERT INTO Author VALUES(7,'Adele','Parks');
INSERT INTO Author VALUES(8,'Julia','Quinn');
INSERT INTO Author VALUES(9,'Leon','Uris');
INSERT INTO Author VALUES(10,'Sarah','Zettel');

INSERT INTO Book VALUES(1,'The Hobbit','Classic',2021);
INSERT INTO Book VALUES(2,'Romeo and Juliet','Classic',1990);
INSERT INTO Book VALUES(3,'Saga','Comic',1678);
INSERT INTO Book VALUES(4,'Sherlock Holmes','Crime',1567);
INSERT INTO Book VALUES(5,'Hamlet','Horror',1983);
INSERT INTO Book VALUES(6,'The Lion And The Mouse ','Fable',1870);
INSERT INTO Book VALUES(7,'Rapunzel','Fairy Tale',1856);
INSERT INTO Book VALUES(8,'Harry Potter','Fan-fiction',1988);
INSERT INTO Book VALUES(9,'The Lord of The Rings','Fantasy',1995);
INSERT INTO Book VALUES(10,'The Notebook','Romance',1877);

INSERT INTO "Order" VALUES(1,TO_DATE('10-MAY-2021','DD-MON-YYYY'),TO_DATE('15-JUL-2021','DD-MON-YYYY'),1,1);
INSERT INTO "Order" VALUES(2,TO_DATE('15-MAY-2019','DD-MON-YYYY'),TO_DATE('20-JUL-2019','DD-MON-YYYY'),2,2);
INSERT INTO "Order" VALUES(3,TO_DATE('18-MAY-2019','DD-MON-YYYY'),TO_DATE('2-JUL-2019','DD-MON-YYYY'),3,3);
INSERT INTO "Order" VALUES(4,TO_DATE('12-MAY-2019','DD-MON-YYYY'),TO_DATE('1-JUL-2019','DD-MON-YYYY'),4,4);
INSERT INTO "Order" VALUES(5,TO_DATE('10-JUN-2019','DD-MON-YYYY'),TO_DATE('21-JUL-2019','DD-MON-YYYY'),5,5);
INSERT INTO "Order" VALUES(6,TO_DATE('10-FEB-2019','DD-MON-YYYY'),TO_DATE('15-MAR-2019','DD-MON-YYYY'),6,6);
INSERT INTO "Order" VALUES(7,TO_DATE('10-OCT-2019','DD-MON-YYYY'),TO_DATE('15-FEB-2019','DD-MON-YYYY'),7,7);
INSERT INTO "Order" VALUES(8,TO_DATE('10-DEC-2019','DD-MON-YYYY'),TO_DATE('19-DEC-2019','DD-MON-YYYY'),8,8);
INSERT INTO "Order" VALUES(9,TO_DATE('10-MAR-2019','DD-MON-YYYY'),TO_DATE('1-APR-2019','DD-MON-YYYY'),9,9);
INSERT INTO "Order" VALUES(10,TO_DATE('10-MAY-2019','DD-MON-YYYY'),TO_DATE('12-JUL-2019','DD-MON-YYYY'),10,10);

INSERT INTO Details_Of_Autheren_Book VALUES(1,1,1); 
INSERT INTO Details_Of_Autheren_Book VALUES(2,2,2); 
INSERT INTO Details_Of_Autheren_Book VALUES(3,3,3); 
INSERT INTO Details_Of_Autheren_Book VALUES(4,4,4); 
INSERT INTO Details_Of_Autheren_Book VALUES(5,5,5); 
INSERT INTO Details_Of_Autheren_Book VALUES(6,6,6); 
INSERT INTO Details_Of_Autheren_Book VALUES(7,7,7); 
INSERT INTO Details_Of_Autheren_Book VALUES(8,8,8); 
INSERT INTO Details_Of_Autheren_Book VALUES(9,9,9); 
INSERT INTO Details_Of_Autheren_Book VALUES(10,10,10); 

INSERT INTO Account VALUES(1,1);
INSERT INTO Account VALUES(2,2);
INSERT INTO Account VALUES(3,3);
INSERT INTO Account VALUES(4,4);
INSERT INTO Account VALUES(5,5);
INSERT INTO Account VALUES(6,6);
INSERT INTO Account VALUES(7,7);
INSERT INTO Account VALUES(8,8);
INSERT INTO Account VALUES(9,9);
INSERT INTO Account VALUES(10,10);




------------PL/SQL PROCEDURES-----------------

--DROPING PROCEDURES
DROP PROCEDURE CHANGE_AUTHOR;
DROP PROCEDURE NoConn;
DROP PROCEDURE BOOKTYPE_TO;
DROP PROCEDURE READERNUMBER;
DROP PROCEDURE BOOK_TAKEN_DAYS;

-----1)PROCEDURE ( procedure “Change_Author” changing author names from given authorname1 to  given  authorname2 )

CREATE OR REPLACE PROCEDURE CHANGE_AUTHOR(AuthorName1 varchar,AuthorName2 varchar)
AS
CURSOR PERSON IS
SELECT Id_Author FROM Author WHERE Name=AuthorName1;
w int;
NOAUTHOR EXCEPTION;
BEGIN
SELECT COUNT(Id_Author) INTO w FROM Author WHERE Name=AuthorName1;
IF w=0 THEN RAISE NOAUTHOR;
ELSE
OPEN PERSON;
LOOP
FETCH PERSON INTO w;
EXIT WHEN PERSON%NOTFOUND;
UPDATE Author SET Name=AuthorName2
WHERE Id_Author=w;
END LOOP;
CLOSE PERSON;
END IF;
EXCEPTION WHEN NOAUTHOR
THEN DBMS_OUTPUT.PUT_LINE(AuthorName1||' HAS NOT ENTERED BEFORE.');
END;

--before changing try
SELECT*FROM Author;
EXECUTE CHANGE_AUTHOR('Louis','Marry') ;
--after changing try
SELECT*FROM Author ;

--exception try
EXECUTE CHANGE_AUTHOR('Mehlika','Louis') ;




--2)PROCEDURE(NoConn Procedure showing on the screen names of people who do not have contact info,if everybody has inf show everybody has contact info)

CREATE OR REPLACE PROCEDURE NoConn
AS
NOREADER EXCEPTION;
CURSOR CONTACT IS
SELECT Id_Reader FROM  Reader WHERE Contac_tInfo IS NULL;
x int;
y varchar(100);
BEGIN
SELECT COUNT(*) INTO x FROM Reader WHERE Contac_tInfo IS NULL;
IF x=0 
THEN RAISE NOREADER;
END IF;
OPEN CONTACT;
LOOP
FETCH CONTACT INTO x;
EXIT WHEN CONTACT%NOTFOUND;
SELECT Name INTO y FROM Reader WHERE Id_Reader=x;
DBMS_OUTPUT.PUT_LINE('Reader without contact info '||y);
END LOOP;
CLOSE CONTACT;
EXCEPTION WHEN NOREADER
THEN DBMS_OUTPUT.PUT_LINE('Everybody has contact info');
END;

--exceuting procedure
SELECT*FROM Reader;
EXECUTE NoConn;




----3)PROCEDURE--------(CHANGE CLASSIC BOOK TYPE TO ?)

CREATE OR REPLACE PROCEDURE BOOKTYPE_TO
AS
NOBOOKTYPE EXCEPTION;
CURSOR BOOKTYPE IS
SELECT Id_Book FROM Book WHERE Type_of_book='Classic';
Y INTEGER;
BEGIN
SELECT COUNT(Id_Book) INTO Y FROM Book WHERE Type_of_book='Classic';
IF Y=0
THEN
RAISE NOBOOKTYPE;
ELSE
OPEN BOOKTYPE;
LOOP
 FETCH BOOKTYPE INTO Y;
EXIT WHEN BOOKTYPE%NOTFOUND;
UPDATE Book SET Type_of_book='?'  WHERE Id_Book=Y;
END LOOP;
CLOSE BOOKTYPE;
END IF;
EXCEPTION WHEN NOBOOKTYPE
THEN DBMS_OUTPUT.PUT_LINE('WE DO NOT HAVE CLASSIC BOOK TYPE.');
END;


--procedure trying
SELECT*FROM Book;
EXEC BOOKTYPE_TO;
SELECT*FROM Book;


---4)PROCEDURE----(SHOWS NUMBER OF READERS)

CREATE OR REPLACE PROCEDURE READERNUMBER
AS
NOREADER EXCEPTION;
X INTEGER;
CURSOR COUNTREADER IS
SELECT (COUNT(Name)) FROM Reader;
BEGIN
SELECT (COUNT(Name)) INTO X FROM Reader; 
IF X=0
THEN RAISE NOREADER;
ELSE
OPEN COUNTREADER;
FETCH COUNTREADER INTO X;
DBMS_OUTPUT.PUT_LINE(X || ' READER WE HAVE');
CLOSE COUNTREADER;
END IF;
EXCEPTION WHEN NOREADER 
THEN DBMS_OUTPUT.PUT_LINE('SORRY NO READER FOUND');
END;

EXECUTE READERNUMBER;

----5)PROCEDURE---(COUNT HOW MANY BOOK TAKEN EXCATLY DAY WHICH YOU CHOOSE.IF YOU DID NOT TAKE ANY BOOK THAT DAY RAISE ----EXCEPTION NO BOOK TAKEN)

CREATE OR REPLACE PROCEDURE BOOK_TAKEN_DAYS(TDAY DATE)
AS
T NUMBER;
NOBOOKTAKEN EXCEPTION;
CURSOR C1 IS
SELECT Id_Order FROM "Order" WHERE Date_take=TDAY;
BEGIN
SELECT COUNT("Order".Id_Order) INTO T FROM "Order" WHERE Date_take=TDAY;
IF T=0
THEN RAISE NOBOOKTAKEN;
ELSE
DBMS_OUTPUT.PUT_LINE('There are ' || T || ' books taken.');
FOR Id_Curorder IN C1 
LOOP 
DBMS_OUTPUT.PUT_LINE('Person ID who ordered: ' || Id_Curorder.Id_Order);
END LOOP;
END IF;
EXCEPTION
WHEN NOBOOKTAKEN
THEN DBMS_OUTPUT.PUT_LINE('There are no books taken that day.');
END;

--SHOW TAKEN BOOK
EXEC BOOK_TAKEN_DAYS('10-MAY-2019'); 
--GIVE EXCEPTION(WE TAKE DATE FROM ORDER WHICH WE DON’T  HAVE BEFORE)
EXEC BOOK_TAKEN_DAYS('11-MAY-2021');


-----------PL/SQL TRIGGERSS--------

---DROPPING TRIGGERS
DROP TRIGGER BOOK_RES;
DROP TRIGGER SHOW_AUTHOUR;
DROP TRIGGER ORDER_BOOK_CHECK;
DROP TRIGGER SAME_TAKEN_DAY;
DROP TRIGGER BOOK_ORDER;



---1)TRIGGER--(WE SHOW AN ERRO IF THE BOOKID HAS PRESENT ORDER AND WANTED TO DELETE) 

CREATE OR REPLACE TRIGGER BOOK_RES
BEFORE DELETE OR UPDATE OF Id_Book ON Book
FOR EACH ROW
DECLARE
B                  INTEGER;  
BOOK_present      EXCEPTION;
BOOK_not_present  EXCEPTION;
CURSOR BOOK_cursor (BN INT) IS
SELECT Book_Id_Book FROM "Order" WHERE Book_Id_Book = BN;
BEGIN
OPEN BOOK_cursor (:OLD.Id_Book);
FETCH BOOK_cursor INTO B;
IF BOOK_cursor%FOUND THEN
RAISE BOOK_present ;     
ELSE
RAISE BOOK_not_present; 
END IF;
CLOSE BOOK_cursor ;
EXCEPTION
WHEN BOOK_present THEN
CLOSE BOOK_cursor;
Raise_application_error(-20001, 'Book Present '      || TO_CHAR(:OLD.Id_Book));
WHEN BOOK_not_present THEN
CLOSE BOOK_cursor;
END;
/

select*from Book;
--EXCEPTION TRYING
DELETE FROM Book WHERE Id_Book=2;





---2)TRIGGER(WHEN WE ADD NEW VALUES INTO DEATIL OF AUTHOR TABLE WE GET AN ID OF AUTHOUR AND NAME OF AUTHOUR)

CREATE OR REPLACE TRIGGER SHOW_AUTHOUR
AFTER INSERT
ON  Details_Of_Autheren_Book 
FOR EACH ROW
DECLARE
CURSOR AC IS
SELECT*FROM Author ;
IDNOW int;
NOWNAME varchar(100);
NOWSURNAME varchar(100);
NOWId_Author int;
BEGIN
OPEN AC;
NOWId_Author := :NEW.Author_Id_Author;
DBMS_OUTPUT.PUT_LINE('NOWId_Author  '||NOWId_Author );
LOOP
FETCH AC INTO IDNOW,NOWNAME ,NOWSURNAME ;
EXIT WHEN AC%NOTFOUND;
IF IDNOW=NOWId_Author
THEN
DBMS_OUTPUT.PUT_LINE('Here is the detailes of the authour name: ' || NOWNAME);
END IF;
END LOOP;
CLOSE  AC;
END;
/

--TRYING TRIGGER
INSERT INTO Author VALUES(100,'Sarah','Zettel');
INSERT INTO Book VALUES(100,'The Notebook','Romance',1877);

INSERT INTO Details_Of_Autheren_Book VALUES(100,100,100);




-----3)TRIGGER--(---If not found bookid, raise user-specified error code and message.)

CREATE OR REPLACE TRIGGER ORDER_BOOK_CHECK
BEFORE INSERT OR UPDATE OF Book_Id_Book ON "Order"
FOR EACH ROW WHEN (NEW.Book_Id_Book IS NOT NULL)
DECLARE
BO               INTEGER;  
Invalid_Book  EXCEPTION;
Valid_Book    EXCEPTION;
Mutating_table      EXCEPTION;
PRAGMA EXCEPTION_INIT (Mutating_table, -4091);
CURSOR BO_CURSOR (BI INT) IS
SELECT Id_Book FROM Book WHERE Id_Book = BI 
FOR UPDATE OF Id_Book;
BEGIN
OPEN BO_CURSOR (:NEW.Book_Id_Book);
FETCH BO_CURSOR INTO BO;
IF BO_CURSOR%NOTFOUND THEN
RAISE Invalid_Book;
ELSE
RAISE Valid_Book;
END IF;
CLOSE BO_CURSOR;
EXCEPTION
WHEN Invalid_Book THEN
CLOSE BO_CURSOR;
Raise_application_error(-20000, 'Invalid_Book');
WHEN Valid_Book THEN
CLOSE BO_CURSOR;
WHEN Mutating_table THEN
NULL;
END;
/

--I WRITE  BOOK_ID_BOOK  WHICH I DONT HAVE IT.SO IT SHOWS ME THAT INVALID BOOK ERROR
INSERT INTO "Order" VALUES(7,TO_DATE('10-OCT-2019','DD-MON-YYYY'),TO_DATE('15-FEB-2019','DD-MON-YYYY'),987567,7);




---4)TRIGGER--( WHEN WE ADD ORDER SAME TAKEN DATE IT SHOWS US WE HAVE NUMBER OF  BOOK THAT SAME DAY TAKEN 

CREATE OR REPLACE TRIGGER SAME_TAKEN_DAY
BEFORE INSERT ON "Order"
FOR EACH ROW
DECLARE
NOTSAMEDAY EXCEPTION;
X INT;
TAKENDATE DATE;
CURSOR TD IS
SELECT*FROM Book;
BEGIN
TAKENDATE := :NEW.Date_take;
SELECT COUNT(Id_Order) INTO X
FROM "Order"
WHERE Date_take=TAKENDATE;
IF X =0
THEN RAISE NOTSAMEDAY;
END IF;
FOR BOO IN TD 
LOOP
IF :NEW.Book_Id_Book=BOO.Id_Book AND X>0
THEN DBMS_OUTPUT.PUT_LINE(BOO.Name || ' ' || BOO.Type_of_book || ' has ' || x || ' order in the same day.');
END IF;
END LOOP;
EXCEPTION WHEN NOTSAMEDAY 
THEN DBMS_OUTPUT.PUT_LINE('DIFFERENT');
END;
/

--TRYING TRIGGER
--DENERKEN DIGER TRIGGERLARI DROP YAPMAYI UNUTMA
INSERT INTO Reader VALUES(151,'MAX','TOMAS',6543782,TO_DATE('27-SEP-1998','DD-MON-YYYY'));
INSERT INTO Reader VALUES(152,'DANIEL','PERL',NULL,TO_DATE('22-MAR-1995','DD-MON-YYYY'));
INSERT INTO Book VALUES(151,'The Notebook','Romance',1877);
INSERT INTO Book VALUES(152,'The Notebook','Romance',1877);
INSERT INTO "Order" VALUES(151,TO_DATE('10-MAY-2021','DD-MON-YYYY'),TO_DATE('25-JUL-2021','DD-MON-YYYY'),151,151);
INSERT INTO "Order" VALUES(152,TO_DATE('10-MAY-2021','DD-MON-YYYY'),TO_DATE('15-JUL-2021','DD-MON-YYYY'),152,152);

---TRYING EXCEPTION
INSERT INTO Reader VALUES(1510,'MAX','TOMAS',6543782,TO_DATE('27-SEP-1998','DD-MON-YYYY'));
INSERT INTO Reader VALUES(1520,'DANIEL','PERL',NULL,TO_DATE('22-MAR-1995','DD-MON-YYYY'));
INSERT INTO Book VALUES(1510,'The Notebook','Romance',1877);
INSERT INTO Book VALUES(1520,'The Notebook','Romance',1877);
INSERT INTO "Order" VALUES(1510,TO_DATE('11-MAY-2021','DD-MON-YYYY'),TO_DATE('25-JUL-2021','DD-MON-YYYY'),1510,1510);
INSERT INTO "Order" VALUES(1520,TO_DATE('10-MAY-2021','DD-MON-YYYY'),TO_DATE('15-JUL-2021','DD-MON-YYYY'),1520,1520);



----5)TRIGGER---(TRIGGER DELETE BOOK BUT IF IT HAS ALREADY OREDER FOR LATER DATE RAISE AN ERROR)

CREATE OR REPLACE TRIGGER BOOK_ORDER
BEFORE DELETE
ON Book
FOR EACH ROW
DECLARE
CURSOR BO IS
SELECT*FROM "Order";
BEGIN
FOR ord IN BO 
LOOP
IF ord.Book_Id_Book= :OLD.Id_Book AND ord.Date_take> SYSDATE
THEN
RAISE_APPLICATION_ERROR(-20000,'Cannot remove, book has ordered for later');
END IF;
END LOOP;
END;
/

--showing error
DELETE FROM Book Where Id_Book=1;
