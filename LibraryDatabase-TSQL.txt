--DROPPING ALL TABELES
DROP TABLE Account;
DROP TABLE Details_Of_Autheren_Book;
DROP TABLE "Order";
DROP TABLE Reader;
DROP TABLE Author;
DROP TABLE Book;


--Table: Account
CREATE TABLE Account (
    Id_Account int  NOT NULL,
    Reader_Id_Reader int  NOT NULL,
    CONSTRAINT Account_pk PRIMARY KEY  (Id_Account)
);

-- Table: Author
CREATE TABLE Author (
    Id_Author int  NOT NULL,
    Name varchar(100)  NOT NULL,
    Surname varchar(100)  NOT NULL,
    CONSTRAINT Author_pk PRIMARY KEY  (Id_Author)
);
-- Table: Book
CREATE TABLE Book (
    Id_Book int  NOT NULL,
    Name varchar(200)  NOT NULL,
    Type_of_book varchar(100),
    Published_year int  NOT NULL,
    CONSTRAINT Book_pk PRIMARY KEY  (Id_Book)
);

-- Table: Details_Of_Autheren_Book
CREATE TABLE Details_Of_Autheren_Book (
    Id_Details int  NOT NULL,
    Author_Id_Author int  NOT NULL,
    Book_Id_Book int  NOT NULL,
    CONSTRAINT Details_Of_Autheren_Book_pk PRIMARY KEY  (Id_Details)
);

-- Table: Order
CREATE TABLE "Order" (
    Id_Order int  NOT NULL,
    Date_take date  NOT NULL,
    Date_give date  NOT NULL,
    Book_Id_Book int  NOT NULL,
    Reader_Id_Reader int  NOT NULL,
    CONSTRAINT Order_pk PRIMARY KEY  (Id_Order)
);

-- Table: Reader
CREATE TABLE Reader (
    Id_Reader int  NOT NULL,
    Name varchar(100)  NOT NULL,
    Surname varchar(100)  NOT NULL,
    Contac_tInfo int,
    date_of_birth date  NOT NULL,
    CONSTRAINT Reader_pk PRIMARY KEY  (Id_Reader)
);

-- Foreign Keys

ALTER TABLE Account ADD CONSTRAINT Account_Reader
    FOREIGN KEY (Reader_Id_Reader)
    REFERENCES Reader (Id_Reader);


ALTER TABLE Details_Of_Autheren_Book ADD CONSTRAINT Details_Of_Autheren_Book_Author
    FOREIGN KEY (Author_Id_Author)
    REFERENCES Author (Id_Author);


ALTER TABLE Details_Of_Autheren_Book ADD CONSTRAINT Details_Of_Autheren_Book_Book
    FOREIGN KEY (Book_Id_Book)
    REFERENCES Book (Id_Book);


ALTER TABLE "Order" ADD CONSTRAINT Order_Book
    FOREIGN KEY (Book_Id_Book)
    REFERENCES Book (Id_Book);


ALTER TABLE "Order" ADD CONSTRAINT Order_Reader
    FOREIGN KEY (Reader_Id_Reader)
    REFERENCES Reader (Id_Reader);
   
--Inserting data into the tables have already created.
INSERT INTO Reader(Id_Reader,Name,Surname,Contac_tInfo,date_of_birth) VALUES(1,'SMITH','MARK',3456728,'20-MAY-1996');
INSERT INTO Reader(Id_Reader,Name,Surname,Contac_tInfo,date_of_birth) VALUES(2,'MARRY','PERL',1234567,'03-JUL-1999');
INSERT INTO Reader(Id_Reader,Name,Surname,Contac_tInfo,date_of_birth) VALUES(3,'SANDRA','LOREN',908765,'20-MAY-2004');
INSERT INTO Reader(Id_Reader,Name,Surname,Contac_tInfo,date_of_birth) VALUES(4,'HANS','SPENCER',4536782,'09-OCT-1995');
INSERT INTO Reader(Id_Reader,Name,Surname,Contac_tInfo,date_of_birth) VALUES(5,'JACK','TRUE',8054632,'03-JUL-1999');
INSERT INTO Reader(Id_Reader,Name,Surname,Contac_tInfo,date_of_birth) VALUES(6,'LAURA','SMITH',7465392,'20-MAY-1996');
INSERT INTO Reader(Id_Reader,Name,Surname,Contac_tInfo,date_of_birth) VALUES(7,'ANDRIE','SAM',098425,'09-DEC-1995');
INSERT INTO Reader(Id_Reader,Name,Surname,Contac_tInfo,date_of_birth) VALUES(8,'ALEX','ALLER',3487653,'20-JAN-1986');
INSERT INTO Reader(Id_Reader,Name,Surname,Contac_tInfo,date_of_birth) VALUES(9,'MAX','TOMAS',6543782,'27-SEP-1998');
INSERT INTO Reader(Id_Reader,Name,Surname,Contac_tInfo,date_of_birth) VALUES(10,'DANIEL','PERL',NULL,'22-MAR-1995');

INSERT INTO Author VALUES(1,'Louis','Sachar');
INSERT INTO Author VALUES(2,'Peter','Sagal');
INSERT INTO Author VALUES(3,'Carl','Sagan');
INSERT INTO Author VALUES(4,'Sait','Faik');
INSERT INTO Author VALUES(5,'Henry','Abbey');
INSERT INTO Author VALUES(6,'John','Barnes');
INSERT INTO Author VALUES(7,'Adele','Parks');
INSERT INTO Author VALUES(8,'Julia','Quinn');
INSERT INTO Author VALUES(9,'Leon','Uris');
INSERT INTO Author VALUES(10,'Sarah','Zettel');

INSERT INTO Book VALUES(1,'The Hobbit','CLASSIC',1987);
INSERT INTO Book VALUES(2,'Romeo and Juliet','Classic',1990);
INSERT INTO Book VALUES(3,'Saga','Comic',1678);
INSERT INTO Book VALUES(4,'Sherlock Holmes','Crime',1567);
INSERT INTO Book VALUES(5,'Hamlet','',1983);
INSERT INTO Book VALUES(6,'The Lion And The Mouse ','Fable',1870);
INSERT INTO Book VALUES(7,'Rapunzel','Fairy Tale',1856);
INSERT INTO Book VALUES(8,'Harry Potter','Fan-fiction',1988);
INSERT INTO Book VALUES(9,'The Lord of The Rings','Fantasy',1995);
INSERT INTO Book VALUES(10,'The Notebook','Romance',1877);

INSERT INTO "Order" VALUES(1,'10-MAY-2021','15-JUL-2021',1,1);
INSERT INTO "Order" VALUES(2,'15-MAY-2019','20-JUL-2019',2,2);
INSERT INTO "Order" VALUES(3,'18-MAY-2019','2-JUL-2019',3,3);
INSERT INTO "Order" VALUES(4,'12-MAY-2019','1-JUL-2019',4,4);
INSERT INTO "Order" VALUES(5,'10-JUN-2019','21-JUL-2019',5,5);
INSERT INTO "Order" VALUES(6,'10-FEB-2019','15-MAR-2019',6,6);
INSERT INTO "Order" VALUES(7,'10-OCT-2019','15-FEB-2019',7,7);
INSERT INTO "Order" VALUES(8,'10-DEC-2019','19-DEC-2019',8,8);
INSERT INTO "Order" VALUES(9,'10-MAR-2019','1-APR-2019',9,9);
INSERT INTO "Order" VALUES(10,'10-MAY-2019','12-JUL-2019',10,10);

INSERT INTO Details_Of_Autheren_Book VALUES(1,1,1);
INSERT INTO Details_Of_Autheren_Book VALUES(2,2,2);
INSERT INTO Details_Of_Autheren_Book VALUES(3,3,3);
INSERT INTO Details_Of_Autheren_Book VALUES(4,4,4);
INSERT INTO Details_Of_Autheren_Book VALUES(5,5,5);
INSERT INTO Details_Of_Autheren_Book VALUES(6,6,6);
INSERT INTO Details_Of_Autheren_Book VALUES(7,7,7);
INSERT INTO Details_Of_Autheren_Book VALUES(8,8,8);
INSERT INTO Details_Of_Autheren_Book VALUES(9,9,9);
INSERT INTO Details_Of_Autheren_Book VALUES(10,10,10);

INSERT INTO Account VALUES(1,1);
INSERT INTO Account VALUES(2,2);
INSERT INTO Account VALUES(3,3);
INSERT INTO Account VALUES(4,4);
INSERT INTO Account VALUES(5,5);
INSERT INTO Account VALUES(6,6);
INSERT INTO Account VALUES(7,7);
INSERT INTO Account VALUES(8,8);
INSERT INTO Account VALUES(9,9);
INSERT INTO Account VALUES(10,10);





-------------TSQL PROCEDURES----------------

-------DROP PROCEDURE
DROP PROCEDURE VARIETY_NUM_BOOK;
DROP PROCEDURE PUBLISHYEAR_OF_BOOKS;
DROP PROCEDURE AUTHOR_NAME;
DROP PROCEDURE  ORDER_TAKENDATES;


--1)PROCEDURE COUNTING VARIETY OF BOOK AMOUNT (OUTPUT)

CREATE PROCEDURE VARIETY_NUM_BOOK
@VARNUM INT OUTPUT
AS
DECLARE BOOKVAR
CURSOR FOR SELECT(COUNT(NAME)) FROM Book;
BEGIN
OPEN BOOKVAR
FETCH NEXT FROM BOOKVAR INTO @VARNUM
PRINT 'VARIETY OF BOOK AMOUNT BELOW :'
CLOSE BOOKVAR;
DEALLOCATE BOOKVAR;
END;

--PROCEDURE TRYING
DECLARE @NUM INT
EXECUTE VARIETY_NUM_BOOK @NUM OUTPUT
PRINT @NUM




---2)RESULT SET PROCEDURE GIVES US PUBLISHED YEAR OF ALL BOOKS (RESULT SET)

CREATE PROCEDURE PUBLISHYEAR_OF_BOOKS
AS
DECLARE @PUBLISH_YEAR INT;
DECLARE YEARPUBLISHED
CURSOR FOR SELECT Published_year FROM Book;
BEGIN
SELECT Published_year FROM Book;
OPEN YEARPUBLISHED
FETCH NEXT FROM YEARPUBLISHED INTO @PUBLISH_YEAR
WHILE @@FETCH_STATUS=0
BEGIN
PRINT @PUBLISH_YEAR
FETCH NEXT FROM YEARPUBLISHED  INTO @PUBLISH_YEAR
END
CLOSE YEARPUBLISHED;
DEALLOCATE YEARPUBLISHED
END;

EXECUTE PUBLISHYEAR_OF_BOOKS;




---3)RETURN TYPE PROCEDURE(ID OF THE AUTHOR FROM DETAIL TABLE IF NAME IS NULL RETUN PRINT 'NO NAME FOR AUTHOUR)

CREATE PROCEDURE AUTHOR_NAME
@AUTHOR_NAME varchar(100)=NULL
AS
DECLARE @DETAIL_ID INT;
DECLARE AUNAME CURSOR
LOCAL FOR
SELECT D.Author_Id_Author
FROM Details_Of_Autheren_Book D , Author A
WHERE D.Author_Id_Author=A.Id_Author AND A.Name=@AUTHOR_NAME
IF @AUTHOR_NAME IS NULL
BEGIN
PRINT 'NO NAME FOR AUTHOUR';
RETURN(1)
END;
BEGIN
OPEN AUNAME
FETCH NEXT FROM AUNAME INTO @DETAIL_ID
WHILE @@FETCH_STATUS=0
BEGIN
PRINT 'DETAIL ID: ' +  CAST(@DETAIL_ID AS VARCHAR(100))
FETCH NEXT FROM AUNAME INTO @DETAIL_ID
END;
CLOSE  AUNAME;
END;

--TRYING NOT EXIST AUTHOR NAME
EXECUTE AUTHOR_NAME ;

--TRYING EXISTS AUTHOR NAME
EXECUTE AUTHOR_NAME 'Julia';


-----4)PROCEDURE(HOW MANY BOOK TAKEN AT GIVEN DATE WITH ID ORDER)


CREATE PROCEDURE ORDER_TAKENDATES @XTAKENDATE DATE
AS
IF EXISTS(SELECT Id_Order FROM "Order" WHERE Date_take=@XTAKENDATE)
BEGIN
DECLARE @X INT;
DECLARE @R INT;
DECLARE OT CURSOR FOR SELECT Reader_Id_Reader FROM "Order" WHERE Date_take=@XTAKENDATE;
OPEN OT
SELECT @X=COUNT(Id_Order) FROM "Order" WHERE Date_take=@XTAKENDATE;
PRINT  CAST(@X AS VARCHAR(100))+' ORDER'
FETCH NEXT FROM OT INTO @R;
WHILE @@FETCH_STATUS=0
BEGIN
PRINT 'ID  ' +  CAST(@R AS VARCHAR(100))
FETCH NEXT FROM OT INTO @R;
END
CLOSE OT
DEALLOCATE OT
END

---TRYING
EXEC ORDER_TAKENDATES '10-FEB-2019';
SELECT *FROM "Order";










-------------------------TSQL TRIGGERS----------------------


------------DROPPING TRIGGERS-------------------
DROP TRIGGER ORDER_FOR_BOOK_TAKENSAMEDAY;
DROP TRIGGER AUTHOUR_INSERTED_SAMENAME;
DROP TRIGGER SHOW_AUTHOR_NAME;



----1)TRIGGER---( SHOW BOOK ORDERED AT SAME DAY)

GO
CREATE TRIGGER ORDER_FOR_BOOK_TAKENSAMEDAY ON "Order"
AFTER INSERT AS
BEGIN
DECLARE @X INT;
DECLARE @NOWID INT, @NOWNAME varchar(200),@NOWType_of_book varchar(100),@NOWPublished_year int;
DECLARE OB CURSOR FOR SELECT*FROM Book;
OPEN OB
SELECT @X= COUNT(Id_Order)
FROM "Order"
WHERE Date_take=(SELECT INSERTED.Date_take FROM INSERTED);
PRINT @X;
FETCH NEXT FROM OB INTO @NOWID, @NOWNAME ,@NOWType_of_book ,@NOWPublished_year;
WHILE @@FETCH_STATUS=0
BEGIN
IF @NOWID = (SELECT INSERTED.Book_Id_Book FROM INSERTED) AND @X>0
PRINT  @NOWNAME+ ' ' + 'ORDERED SAME DAY.'
FETCH NEXT FROM OB INTO @NOWID, @NOWNAME ,@NOWType_of_book ,@NOWPublished_year;
END;
CLOSE OB;
END;

--TRYING OUR TRIGGER
INSERT INTO Reader(Id_Reader,Name,Surname,Contac_tInfo,date_of_birth) VALUES(21,'DANIEL','PER',NULL,'22-MAR-1995');
INSERT INTO Book VALUES(21,'The Notebook','Romance',1877);
INSERT INTO "Order" VALUES(21,'10-MAY-2019','12-JUL-2019',21,21);




------2)TRIGGER----(COUNT SAME NAME AUTHOR AND WRITE WHICH NAME IS SAME AND HOW MANY TIME IT HAS REPAT)-----------

GO
CREATE TRIGGER AUTHOUR_INSERTED_SAMENAME ON Author
AFTER INSERT AS
BEGIN
DECLARE @X INT;
DECLARE @NOWID INT, @NOWNAME varchar(200),@NOWSurname varchar(100);
DECLARE AI CURSOR FOR 
SELECT*FROM Author;
OPEN AI
SELECT @X= COUNT(Id_Author)
FROM Author
WHERE Name=(SELECT INSERTED.Name FROM INSERTED);
PRINT @X;
FETCH NEXT FROM AI INTO @NOWID, @NOWNAME ,@NOWSurname;
WHILE @@FETCH_STATUS=0
BEGIN
IF @NOWID = (SELECT INSERTED.Id_Author FROM INSERTED) AND @X>0
PRINT  @NOWNAME+ ' ' + 'SAME NAME.'
FETCH NEXT FROM AI INTO  @NOWID, @NOWNAME ,@NOWSurname;
END;
CLOSE AI;
END;

--TRY TRIGGER
INSERT INTO Author VALUES(41,'Sarah','MEF');



----3)TRIGGER(SHOWS ALL AUTHOUR NAME WITH NEW INSERTED AUTHOUR NAME)

DROP TRIGGER AUTHOUR_INSERTED_SAMENAME;
GO
CREATE TRIGGER SHOW_AUTHOR_NAME ON  Details_Of_Autheren_Book
AFTER INSERT AS
BEGIN
DECLARE @NOWID int, @NOWAUTNAME varchar(100) ,@NOWAUTSURNAME varchar(100);
DECLARE DA CURSOR LOCAL FOR
SELECT*FROM Author;
OPEN DA
FETCH NEXT FROM DA INTO @NOWID, @NOWAUTNAME, @NOWAUTSURNAME
WHILE @@FETCH_STATUS=0
BEGIN
IF @NOWID=(SELECT INSERTED.Author_Id_Author FROM INSERTED)
PRINT 'AUTHOR NAME';
PRINT  @NOWAUTNAME;
FETCH NEXT FROM DA INTO @NOWID, @NOWAUTNAME, @NOWAUTSURNAME
END;
CLOSE DA;
END;

--NEW DATA ADDED
INSERT INTO Book VALUES(13,'The Note','Romance',1811);
INSERT INTO Author VALUES(13,'ZEY','Zel');
--TRY TRIGGER
INSERT INTO Details_Of_Autheren_Book VALUES(13,13,13);

